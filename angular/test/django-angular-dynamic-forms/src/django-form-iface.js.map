{"version":3,"sources":["django-angular-dynamic-forms/src/django-form-iface.ts"],"names":[],"mappings":";;AAEA,IAAY,gBASX;AATD,WAAY,gBAAgB;IACxB,qCAAiB,CAAA;IACjB,yCAAqB,CAAA;IACrB,iCAAa,CAAA;IACb,uCAAmB,CAAA;IACnB,mCAAe,CAAA;IACf,uCAAmB,CAAA;IACnB,mCAAe,CAAA;IACf,qCAAiB,CAAA;AACrB,CAAC,EATW,gBAAgB,GAAhB,wBAAgB,KAAhB,wBAAgB,QAS3B;AAED,IAAY,mBAEX;AAFD,WAAY,mBAAmB;IAC3B,4CAAqB,CAAA;AACzB,CAAC,EAFW,mBAAmB,GAAnB,2BAAmB,KAAnB,2BAAmB,QAE9B","file":"django-form-iface.js","sourcesContent":["import {DynamicFormControlLayout} from '@ng-dynamic-forms/core';\n\nexport enum SimpleFieldTypes {\n    STRING = 'string',\n    TEXTAREA = 'textarea',\n    DATE = 'date',\n    INTEGER = 'integer',\n    FLOAT = 'float',\n    BOOLEAN = 'boolean',\n    RADIO = 'radio',\n    SELECT = 'select'\n}\n\nexport enum CompositeFieldTypes {\n    FIELDSET = 'fieldset',\n}\n\nexport type FieldTypes = SimpleFieldTypes | CompositeFieldTypes;\n\nexport interface FieldConfigBase {\n    id?: string;\n    label?: string;\n    type: FieldTypes;\n    required?: boolean;\n    read_only?: boolean;\n    layout?: DynamicFormControlLayout;\n}\n\nexport interface StringFieldConfig extends FieldConfigBase {\n    type: SimpleFieldTypes.STRING;\n    max_length?: number;\n    min_length?: number;\n    autocomplete_list?: string[];\n    autocomplete_url?: string;\n}\n\nexport interface TextAreaFieldConfig extends FieldConfigBase {\n    type: SimpleFieldTypes.TEXTAREA;\n    max_length?: number;\n    min_length?: number;\n}\n\nexport interface DateFieldConfig extends FieldConfigBase {\n    type: SimpleFieldTypes.DATE;\n}\n\nexport interface BooleanFieldConfig extends FieldConfigBase {\n    type: SimpleFieldTypes.BOOLEAN;\n}\n\nexport interface IntegerFieldConfig extends FieldConfigBase {\n    type: SimpleFieldTypes.INTEGER;\n    max_value?: number;\n    min_value?: number;\n}\n\nexport interface FloatFieldConfig extends FieldConfigBase {\n    type: SimpleFieldTypes.FLOAT;\n    max_value?: number;\n    min_value?: number;\n}\n\nexport interface FieldChoice {\n    label: string;\n    value: string;\n}\n\nexport interface RadioFieldConfig extends FieldConfigBase {\n    type: SimpleFieldTypes.RADIO;\n    choices: FieldChoice[];\n}\n\nexport interface SelectFieldConfig extends FieldConfigBase {\n    type: SimpleFieldTypes.SELECT;\n    choices: FieldChoice[];\n}\n\nexport interface FieldSetConfig extends FieldConfigBase {\n    type: CompositeFieldTypes.FIELDSET;\n    controls: FieldConfig[];\n}\n\nexport type FieldConfig = StringFieldConfig | TextAreaFieldConfig | DateFieldConfig |\n    IntegerFieldConfig | FloatFieldConfig | BooleanFieldConfig | RadioFieldConfig | SelectFieldConfig | FieldSetConfig;\n\nexport interface DjangoFormConfig {\n    // url of the django rest framework endpoint\n    django_url?: string;\n\n    // title of the form (in the target language, will not get translated)\n    form_title?: string;\n\n    // true if should fetch the initial data via get to the django_url\n    has_initial_data?: boolean;\n\n    // either \"post\" or \"patch\"\n    method?: string;\n\n    // the initial data, might not be filled\n    initial_data?: any;\n\n    // layout of the form\n    layout?: FieldConfig[];\n}\n\n\nexport interface DjangoDialogConfig {\n\n    // django url, form will be downloaded from the url\n    django_url?: string;\n\n    // config in case django_url is not set\n    config?: DjangoFormConfig;\n\n    // extra data that will be sent in GET/POST requests to django\n    extra_form_data?: any;\n\n    // transformation that is performed on the initial data before they are passed to generated form\n    initial_data_transformation?: (initial_data: any) => any;\n\n    // transformation to the form configuration before the form is generated\n    config_transformation?: (config: DjangoFormConfig) => DjangoFormConfig;\n\n    // form name in case there are multiple forms defined on a viewset\n    form_id?: string;\n\n}\n"]}