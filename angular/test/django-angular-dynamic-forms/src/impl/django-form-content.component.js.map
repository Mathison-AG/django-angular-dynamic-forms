{"version":3,"sources":["django-angular-dynamic-forms/src/impl/django-form-content.component.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,sCAA4G;AAI5G,+CAIgC;AAChC,mCAAiC;AACjC,6CAAgD;AAEhD,iDAA6C;AAC7C,0DAG8B;AAG9B;;GAEG;AAMH;IAmEI,oCAAoB,WAA+B,EAAU,UAAsB,EAC/D,aAA2B,EAC3B,eAA2B,EAC3B,KAAwB;QAHxB,gBAAW,GAAX,WAAW,CAAoB;QAAU,eAAU,GAAV,UAAU,CAAY;QAC/D,kBAAa,GAAb,aAAa,CAAc;QAC3B,oBAAe,GAAf,eAAe,CAAY;QAC3B,UAAK,GAAL,KAAK,CAAmB;QArE5C,eAAU,GAA8B,EAAE,CAAC;QACnC,mBAAc,GAAoB,EAAE,CAAC;QAErC,YAAO,GAAG,CAAC,CAAC;QAEpB;;;WAGG;QACO,oBAAe,GAAG,IAAI,mBAAY,EAAE,CAAC;QAEvC,qBAAgB,GAA0B,EAAE,CAAC;QAC7C,kBAAa,GAAQ,IAAI,CAAC;IA0DlC,CAAC;IAvDD,sBAAI,8CAAM;aAAV,UAAW,OAAsB;YAC7B,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;gBACV,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC;gBACrB,IAAI,CAAC,cAAc,GAAG,EAAE,CAAC;gBACzB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,0BAA0B,CAAC,OAAO,CAAC,CAAC;gBAE3D,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;oBAClB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC,eAAe,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;oBACpE,IAAI,CAAC,kBAAkB,EAAE,CAAC;oBAC1B,IAAI,CAAC,oBAAoB,EAAE,CAAC;gBAChC,CAAC;gBAED,IAAI,CAAC,KAAK,CAAC,aAAa,EAAE,CAAC;YAC/B,CAAC;QACL,CAAC;;;OAAA;IAGD,sBAAI,8CAAM;aAAV,UAAW,OAAY;YACnB,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;gBACV,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,gBAAgB,EAAE,OAAO,CAAC,CAAC;gBAC9C,GAAG,CAAC,CAAqB,UAAmC,EAAnC,KAAA,MAAM,CAAC,mBAAmB,CAAC,OAAO,CAAC,EAAnC,cAAmC,EAAnC,IAAmC;oBAAvD,IAAM,UAAU,SAAA;oBACjB,IAAM,YAAY,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC;oBACzC,IAAM,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,UAAU,EAAE,IAAI,CAAC,UAAU,CAAsB,CAAC;oBAChG,gEAAgE;oBAChE,EAAE,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC;wBACb,WAAmB,CAAC,cAAc,GAAG,YAAY,CAAC,CAAC,CAAC,CAAC;oBAC1D,CAAC;oBACD,sCAAsC;oBACtC,IAAM,aAAa,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;oBACtD,EAAE,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC;wBAChB,aAAa,CAAC,WAAW,EAAE,CAAC;wBAC5B,aAAa,CAAC,aAAa,EAAE,CAAC;wBAC9B,aAAa,CAAC,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;oBAChD,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACJ,OAAO,CAAC,GAAG,CAAC,0BAAwB,UAAU,YAAS,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;oBAC9E,CAAC;iBACJ;YACL,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,GAAG,CAAC,CAAe,UAAiD,EAAjD,KAAA,MAAM,CAAC,mBAAmB,CAAC,IAAI,CAAC,gBAAgB,CAAC,EAAjD,cAAiD,EAAjD,IAAiD;oBAA/D,IAAM,IAAI,SAAA;oBACX,OAAO,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;iBACtC;YACL,CAAC;QACL,CAAC;;;OAAA;IAGD,sBAAI,oDAAY;aAAhB,UAAiB,IAAS;YACtB,OAAO,CAAC,GAAG,CAAC,kBAAkB,EAAE,IAAI,CAAC,CAAC;YACtC,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;YAC1B,IAAI,CAAC,oBAAoB,EAAE,CAAC;QAChC,CAAC;;;OAAA;IAQD,6CAAQ,GAAR;QACI,mDAAmD;QACnD,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;YACnB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC,eAAe,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;YACpE,IAAI,CAAC,kBAAkB,EAAE,CAAC;YAC1B,IAAI,CAAC,oBAAoB,EAAE,CAAC;QAChC,CAAC;QACD,IAAI,CAAC,mBAAmB,EAAE,CAAC;QAC3B,IAAI,CAAC,KAAK,CAAC,aAAa,EAAE,CAAC;IAC/B,CAAC;IAEO,uDAAkB,GAA1B;QAAA,iBASC;gCARc,aAAa;YACpB,IAAM,MAAM,GAAG,OAAK,UAAU,CAAC,GAAG,CAAC,OAAK,WAAW,CAAC,OAAO,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC;YAClF,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;gBACT,MAAM,CAAC,YAAY,CAAC,SAAS,CAAC,UAAA,KAAK;oBAC/B,aAAa,CAAC,MAAM,CAAC,MAAM,EAAE,KAAK,EAAE,KAAI,CAAC,KAAK,CAAC,CAAC;gBACpD,CAAC,CAAC,CAAC;YACP,CAAC;QACL,CAAC;;QAPD,GAAG,CAAC,CAAwB,UAAmB,EAAnB,KAAA,IAAI,CAAC,cAAc,EAAnB,cAAmB,EAAnB,IAAmB;YAA1C,IAAM,aAAa,SAAA;oBAAb,aAAa;SAOvB;IACL,CAAC;IAEO,wDAAmB,GAA3B;QAAA,iBASC;QARG,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;YAClB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,UAAA,KAAK;gBAC/C,IAAM,OAAO,GAAG,KAAI,CAAC,UAAU,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;gBAC3C,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;oBACV,OAAO,CAAC,aAAa,CAAC,EAAC,QAAQ,EAAE,IAAI,EAAC,CAAC,CAAC;gBAC5C,CAAC;YACL,CAAC,CAAC,CAAC;QACP,CAAC;IACL,CAAC;IAEO,+DAA0B,GAAlC,UAAmC,OAAsB;QACrD,IAAM,KAAK,GAA8B,EAAE,CAAC;QAC5C,GAAG,CAAC,CAAiB,UAAO,EAAP,mBAAO,EAAP,qBAAO,EAAP,IAAO;YAAvB,IAAM,MAAM,gBAAA;YACb,IAAM,QAAQ,GAAG,IAAI,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC;YACnD,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACX,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YACzB,CAAC;SACJ;QACD,MAAM,CAAC,KAAK,CAAC;IACjB,CAAC;IAEO,yDAAoB,GAA5B,UAA6B,YAAyB;QAElD,IAAM,EAAE,GAAG,YAAY,CAAC,EAAE,IAAI,8BAA8B,CAAC;QAC7D,IAAM,KAAK,GAAG,YAAY,CAAC,KAAK,IAAI,EAAE,CAAC;QACvC,IAAM,IAAI,GAAG,YAAY,CAAC,IAAI,IAAI,oCAAgB,CAAC,MAAM,CAAC;QAE1D,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;YACX,KAAK,oCAAgB,CAAC,MAAM;gBACxB,IAAM,GAAG,GAAG,YAAiC,CAAC;gBAC9C,IAAM,KAAK,GAAG,IAAI,wBAAiB,CAC/B;oBACI,EAAE,EAAE,EAAE;oBACN,WAAW,EAAE,KAAK;oBAClB,QAAQ,EAAE,YAAY,CAAC,QAAQ;oBAC/B,QAAQ,EAAE,YAAY,CAAC,SAAS;oBAChC,UAAU,EAAE;wBACR,kBAAkB,EAAE;4BAChB,IAAI,EAAE,kBAAkB,CAAC,IAAI;4BAC7B,IAAI,EAAE,EAAC,EAAE,EAAE,EAAE,EAAE,MAAM,EAAE,IAAI,CAAC,gBAAgB,EAAC;yBAChD;wBACD,SAAS,EAAE,GAAG,CAAC,UAAU;wBACzB,SAAS,EAAE,GAAG,CAAC,UAAU;qBAC5B;oBACD,aAAa,EAAE;wBACX,cAAc,EAAE,oBAAoB;qBACvC;oBACD,IAAI,EAAE,GAAG,CAAC,iBAAiB;iBAC9B,EACD,YAAY,CAAC,MAAM,CACtB,CAAC;gBACF,EAAE,CAAC,CAAC,GAAG,CAAC,iBAAiB;oBACrB,GAAG,CAAC,gBAAgB,CAAC,CAAC,CAAC;oBACvB,IAAI,CAAC,cAAc,CAAC,IAAI,CACpB,IAAI,aAAa,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,aAAa,EACjD,GAAG,CAAC,iBAAiB,EACrB,GAAG,CAAC,gBAAgB,EACpB,KAAK,CAAC,CAAC,CAAC;gBACpB,CAAC;gBACD,MAAM,CAAC,KAAK,CAAC;YACjB,KAAK,oCAAgB,CAAC,QAAQ;gBAC1B,MAAM,CAAC,IAAI,2BAAoB,CAC3B;oBACI,EAAE,EAAE,EAAE;oBACN,WAAW,EAAE,KAAK;oBAClB,QAAQ,EAAE,YAAY,CAAC,QAAQ;oBAC/B,QAAQ,EAAE,YAAY,CAAC,SAAS;oBAChC,IAAI,EAAE,CAAC;oBACP,UAAU,EAAE;wBACR,kBAAkB,EAAE;4BAChB,IAAI,EAAE,kBAAkB,CAAC,IAAI;4BAC7B,IAAI,EAAE,EAAC,EAAE,EAAE,EAAE,EAAE,MAAM,EAAE,IAAI,CAAC,gBAAgB,EAAC;yBAChD;wBACD,SAAS,EAAG,YAAoC,CAAC,UAAU;wBAC3D,SAAS,EAAG,YAAoC,CAAC,UAAU;qBAC9D;oBACD,aAAa,EAAE;wBACX,cAAc,EAAE,oBAAoB;qBACvC;iBACJ,EACD,YAAY,CAAC,MAAM,CACtB,CAAC;YACN,KAAK,oCAAgB,CAAC,IAAI;gBACtB,MAAM,CAAC,IAAI,wBAAiB,CACxB;oBACI,EAAE,EAAE,EAAE;oBACN,WAAW,EAAE,KAAK;oBAClB,SAAS,EAAE,2CAAoC;oBAC/C,QAAQ,EAAE,YAAY,CAAC,QAAQ;oBAC/B,QAAQ,EAAE,YAAY,CAAC,SAAS;oBAChC,UAAU,EAAE;wBACR,kBAAkB,EAAE;4BAChB,IAAI,EAAE,kBAAkB,CAAC,IAAI;4BAC7B,IAAI,EAAE,EAAC,EAAE,EAAE,EAAE,EAAE,MAAM,EAAE,IAAI,CAAC,gBAAgB,EAAC;yBAChD;qBACJ;oBACD,aAAa,EAAE;wBACX,cAAc,EAAE,oBAAoB;qBACvC;iBACJ,EACD,YAAY,CAAC,MAAM,CACtB,CAAC;YACN,KAAK,oCAAgB,CAAC,OAAO;gBACzB,IAAM,GAAG,GAAI,YAAmC,CAAC;gBACjD,MAAM,CAAC,IAAI,wBAAiB,CACxB;oBACI,EAAE,EAAE,EAAE;oBACN,WAAW,EAAE,KAAK;oBAClB,SAAS,EAAE,6CAAsC;oBACjD,QAAQ,EAAE,YAAY,CAAC,QAAQ;oBAC/B,QAAQ,EAAE,YAAY,CAAC,SAAS;oBAChC,GAAG,EAAE,GAAG,CAAC,SAAS;oBAClB,GAAG,EAAE,GAAG,CAAC,SAAS;oBAClB,UAAU,EAAE;wBACR,kBAAkB,EAAE;4BAChB,IAAI,EAAE,kBAAkB,CAAC,IAAI;4BAC7B,IAAI,EAAE,EAAC,EAAE,EAAE,EAAE,EAAE,MAAM,EAAE,IAAI,CAAC,gBAAgB,EAAC;yBAChD;wBACD,GAAG,EAAE,GAAG,CAAC,SAAS;wBAClB,GAAG,EAAE,GAAG,CAAC,SAAS;qBACrB;oBACD,aAAa,EAAE;wBACX,cAAc,EAAE,oBAAoB;wBACpC,GAAG,EAAE,4BAA0B,GAAG,CAAC,SAAS,WAAM,GAAG,CAAC,SAAW;wBACjE,GAAG,EAAE,4BAA0B,GAAG,CAAC,SAAS,WAAM,GAAG,CAAC,SAAW;qBACpE;iBACJ,EACD,YAAY,CAAC,MAAM,CACtB,CAAC;YACN,KAAK,oCAAgB,CAAC,KAAK;gBACvB,IAAM,GAAG,GAAI,YAAiC,CAAC;gBAC/C,MAAM,CAAC,IAAI,wBAAiB,CACxB;oBACI,EAAE,EAAE,EAAE;oBACN,WAAW,EAAE,KAAK;oBAClB,SAAS,EAAE,6CAAsC;oBACjD,QAAQ,EAAE,YAAY,CAAC,QAAQ;oBAC/B,QAAQ,EAAE,YAAY,CAAC,SAAS;oBAChC,GAAG,EAAE,GAAG,CAAC,SAAS;oBAClB,GAAG,EAAE,GAAG,CAAC,SAAS;oBAClB,IAAI,EAAE,UAAU;oBAChB,UAAU,EAAE;wBACR,kBAAkB,EAAE;4BAChB,IAAI,EAAE,kBAAkB,CAAC,IAAI;4BAC7B,IAAI,EAAE,EAAC,EAAE,EAAE,EAAE,EAAE,MAAM,EAAE,IAAI,CAAC,gBAAgB,EAAC;yBAChD;wBACD,GAAG,EAAE,GAAG,CAAC,SAAS;wBAClB,GAAG,EAAE,GAAG,CAAC,SAAS;qBACrB;oBACD,aAAa,EAAE;wBACX,cAAc,EAAE,oBAAoB;wBACpC,GAAG,EAAE,4BAA0B,GAAG,CAAC,SAAS,WAAM,GAAG,CAAC,SAAW;wBACjE,GAAG,EAAE,4BAA0B,GAAG,CAAC,SAAS,WAAM,GAAG,CAAC,SAAW;qBACpE;iBACJ,EACD,YAAY,CAAC,MAAM,CACtB,CAAC;YACN,KAAK,oCAAgB,CAAC,OAAO;gBACzB,MAAM,CAAC,IAAI,2BAAoB,CAC3B;oBACI,EAAE,EAAE,EAAE;oBACN,KAAK,EAAE,KAAK;oBACZ,QAAQ,EAAE,YAAY,CAAC,QAAQ;oBAC/B,QAAQ,EAAE,YAAY,CAAC,SAAS;oBAChC,UAAU,EAAE;wBACR,kBAAkB,EAAE;4BAChB,IAAI,EAAE,kBAAkB,CAAC,IAAI;4BAC7B,IAAI,EAAE,EAAC,EAAE,EAAE,EAAE,EAAE,MAAM,EAAE,IAAI,CAAC,gBAAgB,EAAC;yBAChD;qBACJ;oBACD,aAAa,EAAE;wBACX,cAAc,EAAE,oBAAoB;qBACvC;iBACJ,EACD,YAAY,CAAC,MAAM,CACtB,CAAC;YACN,KAAK,oCAAgB,CAAC,KAAK;gBACvB,MAAM,CAAC,IAAI,6BAAsB,CAC7B;oBACI,EAAE,EAAE,EAAE;oBACN,KAAK,EAAE,KAAK;oBACZ,OAAO,EAAG,YAAiC,CAAC,OAAO;oBACnD,QAAQ,EAAE,YAAY,CAAC,QAAQ;oBAC/B,QAAQ,EAAE,YAAY,CAAC,SAAS;oBAChC,UAAU,EAAE;wBACR,kBAAkB,EAAE;4BAChB,IAAI,EAAE,kBAAkB,CAAC,IAAI;4BAC7B,IAAI,EAAE,EAAC,EAAE,EAAE,EAAE,EAAE,MAAM,EAAE,IAAI,CAAC,gBAAgB,EAAC;yBAChD;qBACJ;oBACD,aAAa,EAAE;wBACX,cAAc,EAAE,oBAAoB;qBACvC;iBACJ,EACD,YAAY,CAAC,MAAM,CACtB,CAAC;YACN,KAAK,oCAAgB,CAAC,MAAM;gBACxB,MAAM,CAAC,IAAI,yBAAkB,CACzB;oBACI,EAAE,EAAE,EAAE;oBACN,WAAW,EAAE,KAAK;oBAClB,OAAO,EAAG,YAAkC,CAAC,OAAO;oBACpD,QAAQ,EAAE,YAAY,CAAC,QAAQ;oBAC/B,QAAQ,EAAE,YAAY,CAAC,SAAS;oBAChC,UAAU,EAAE;wBACR,kBAAkB,EAAE;4BAChB,IAAI,EAAE,kBAAkB,CAAC,IAAI;4BAC7B,IAAI,EAAE,EAAC,EAAE,EAAE,EAAE,EAAE,MAAM,EAAE,IAAI,CAAC,gBAAgB,EAAC;yBAChD;qBACJ;oBACD,aAAa,EAAE;wBACX,cAAc,EAAE,oBAAoB;qBACvC;iBACJ,EACD,YAAY,CAAC,MAAM,CACtB,CAAC;YACN,KAAK,uCAAmB,CAAC,QAAQ;gBAC7B,MAAM,CAAC,IAAI,4BAAqB,CAC5B;oBACI,EAAE,EAAE,YAAY,GAAG,IAAI,CAAC,OAAO,EAAE;oBACjC,KAAK,EAAE,KAAK;oBACZ,KAAK,EAAE,IAAI,CAAC,0BAA0B,CAAE,YAA+B,CAAC,QAAQ,CAAC;iBACpF,EACD,YAAY,CAAC,MAAM,CACtB,CAAC;YACN;gBACI,MAAM,IAAI,KAAK,CAAC,6BAA2B,IAAM,CAAC,CAAC;QAC3D,CAAC;IACL,CAAC;IAEO,yDAAoB,GAA5B;QAAA,iBAWC;QAVG,OAAO,CAAC,GAAG,CAAC,uBAAuB,EAAE,IAAI,CAAC,aAAa,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;QAC1E,EAAE,CAAC,CAAC,IAAI,CAAC,aAAa,IAAI,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;YACxC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,UAAA,IAAI;gBAC9C,EAAE,CAAC,CAAC,KAAI,CAAC,aAAa,CAAC,CAAC,CAAC;oBACrB,EAAE,CAAC,CAAC,IAAI,IAAI,KAAI,CAAC,aAAa,CAAC,CAAC,CAAC;wBAC7B,KAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC,KAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC;oBACtE,CAAC;gBACL,CAAC;YACL,CAAC,CAAC,CAAC;QACP,CAAC;IACL,CAAC;IAED,sBAAW,6CAAK;aAAhB;YACI,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;gBAClB,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC;YACjC,CAAC;YACD,MAAM,CAAC,IAAI,CAAC;QAChB,CAAC;;;OAAA;IAED,sBAAW,6CAAK;aAAhB;YACI,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;gBAClB,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC;YACjC,CAAC;YACD,MAAM,CAAC,IAAI,CAAC;QAChB,CAAC;;;OAAA;IAEM,uDAAkB,GAAzB;QACI,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAC1C,CAAC;IAzVS;QAAT,aAAM,EAAE;;uEAAsC;IAM/C;QADC,YAAK,EAAE;;;4DAeP;IAGD;QADC,YAAK,EAAE;;;4DA0BP;IAGD;QADC,YAAK,EAAE;;;kEAKP;IAjEQ,0BAA0B;QALtC,gBAAS,CAAC;YACP,QAAQ,EAAE,qBAAqB;YAC/B,WAAW,EAAE,sCAAsC;YACnD,SAAS,EAAE,CAAC,sCAAsC,CAAC;SACtD,CAAC;yCAoEmC,yBAAkB,EAAsB,iBAAU;YAChD,4BAAY;YACV,iBAAU;YACpB,wBAAiB;OAtEnC,0BAA0B,CAoWtC;IAAD,iCAAC;CApWD,AAoWC,IAAA;AApWY,gEAA0B;AAsWvC,4BAAmC,IAAiC;IAChE,oCAAoC;IACpC,MAAM,CAAC,UAAC,QAAyB;QAC7B,EAAE,CAAC,CAAC,IAAI,CAAC,EAAE,IAAI,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;YACzB,IAAM,GAAG,GAAG,EAAC,cAAc,EAAE,EAAC,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAC,EAAC,CAAC;YAC/D,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YAC5B,MAAM,CAAC,GAAG,CAAC;QACf,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,MAAM,CAAC,EAAE,CAAC;QACd,CAAC;IACL,CAAC,CAAC;AACN,CAAC;AAXD,gDAWC;AAED;IACI,uBAAoB,IAAgB,EAChB,MAAoB,EACpB,mBAAoC,EACpC,kBAAoC,EACrC,KAAU;QAJT,SAAI,GAAJ,IAAI,CAAY;QAChB,WAAM,GAAN,MAAM,CAAc;QACpB,wBAAmB,GAAnB,mBAAmB,CAAiB;QACpC,uBAAkB,GAAlB,kBAAkB,CAAkB;QACrC,UAAK,GAAL,KAAK,CAAK;IAC7B,CAAC;IAEM,8BAAM,GAAb,UAAc,OAAY,EAAE,KAAa,EAAE,UAAkB;QAA7D,iBAqBC;QApBG,IAAI,aAAa,CAAC;QAClB,EAAE,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC;YAC1B,IAAI,CAAC,IAAI;iBACJ,IAAI,CAAQ,IAAI,CAAC,kBAAkB,GAAG,SAAS,GAAG,kBAAkB,CAAC,KAAK,CAAC,EAAE,UAAU,CAAC;iBACxF,KAAK,CAAC,UAAA,KAAK;gBACR,MAAM,CAAC,KAAI,CAAC,MAAM,CAAC,wBAAwB,CAAC,KAAK,CAAC,CAAC;YACvD,CAAC,CAAC;iBACD,SAAS,CAAC,UAAA,IAAI;gBACX,IAAI,GAAG,IAAI,IAAI,EAAE,CAAC;gBAClB,aAAa,GAAG,IAAI,CAAC,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,KAAK,EAAP,CAAO,CAAC,CAAC;gBACvC,KAAI,CAAC,KAAK,CAAC,IAAI,GAAG,aAAa,CAAC;YACpC,CAAC,CAAC,CAAC;QACX,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,EAAE,CAAC,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC,CAAC;gBAC3B,aAAa,GAAG,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,EAArB,CAAqB,CAAC,CAAC;gBAC5E,IAAI,CAAC,KAAK,CAAC,IAAI,GAAG,aAAa,CAAC;YACpC,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,IAAI,CAAC,KAAK,CAAC,IAAI,GAAG,EAAE,CAAC;YACzB,CAAC;QACL,CAAC;IACL,CAAC;IACL,oBAAC;AAAD,CA9BA,AA8BC,IAAA","file":"django-form-content.component.js","sourcesContent":["import {ChangeDetectorRef, Component, ElementRef, EventEmitter, Input, OnInit, Output} from '@angular/core';\n\nimport {AbstractControl, FormGroup, ValidatorFn} from '@angular/forms';\n\nimport {\n    DYNAMIC_FORM_CONTROL_INPUT_TYPE_DATE, DYNAMIC_FORM_CONTROL_INPUT_TYPE_NUMBER, DynamicCheckboxModel,\n    DynamicFormControlModel, DynamicFormGroupModel, DynamicFormService, DynamicInputModel, DynamicRadioGroupModel,\n    DynamicSelectModel, DynamicTextAreaModel\n} from '@ng-dynamic-forms/core';\nimport 'rxjs/add/operator/merge';\nimport {HttpClient} from '@angular/common/http';\n\nimport {ErrorService} from './error-service';\nimport {\n    CompositeFieldTypes, FieldConfig, FieldSetConfig, FloatFieldConfig, IntegerFieldConfig, RadioFieldConfig,\n    SelectFieldConfig, SimpleFieldTypes, StringFieldConfig, TextAreaFieldConfig\n} from '../django-form-iface';\n\n\n/**\n * Form component targeted on django rest framework\n */\n@Component({\n    selector: 'django-form-content',\n    templateUrl: './django-form-content.component.html',\n    styleUrls: ['./django-form-content.component.scss']\n})\nexport class DjangoFormContentComponent implements OnInit {\n    form_model: DynamicFormControlModel[] = [];\n    private autocompleters: AutoCompleter[] = [];\n    form_group: FormGroup;\n    private last_id = 0;\n\n    /**\n     * Returns submitted form data on enter\n     *\n     */\n    @Output() submit_on_enter = new EventEmitter();\n\n    private _external_errors: { [s: string]: any; } = {};\n    private _initial_data: any = null;\n\n    @Input()\n    set layout(_layout: FieldConfig[]) {\n        if (_layout) {\n            this.form_model = [];\n            this.autocompleters = [];\n            this.form_model = this._generate_ui_control_array(_layout);\n\n            if (this.form_group) {\n                this.form_group = this.formService.createFormGroup(this.form_model);\n                this._bind_autocomplete();\n                this._update_initial_data();\n            }\n\n            this.check.detectChanges();\n        }\n    }\n\n    @Input()\n    set errors(_errors: any) {\n        if (_errors) {\n            Object.assign(this._external_errors, _errors);\n            for (const error_name of Object.getOwnPropertyNames(_errors)) {\n                const error_values = _errors[error_name];\n                const error_model = this.formService.findById(error_name, this.form_model) as DynamicInputModel;\n                // TODO: hack - do not know how to set up the validation message\n                if (error_model) {\n                    (error_model as any).external_error = error_values[0];\n                }\n                // TODO: change this to support arrays\n                const error_control = this.form_group.get(error_name);\n                if (error_control) {\n                    error_control.markAsDirty();\n                    error_control.markAsTouched();\n                    error_control.setValue(error_control.value);\n                } else {\n                    console.log(`Can not set error of ${error_name} within`, this.form_group);\n                }\n            }\n        } else {\n            for (const prop of Object.getOwnPropertyNames(this._external_errors)) {\n                delete this._external_errors[prop];\n            }\n        }\n    }\n\n    @Input()\n    set initial_data(data: any) {\n        console.log('set initial data', data);\n        this._initial_data = data;\n        this._update_initial_data();\n    }\n\n    constructor(private formService: DynamicFormService, private httpClient: HttpClient,\n                private error_service: ErrorService,\n                private current_element: ElementRef,\n                private check: ChangeDetectorRef) {\n    }\n\n    ngOnInit() {\n        // create an empty form group, will be filled later\n        if (!this.form_group) {\n            this.form_group = this.formService.createFormGroup(this.form_model);\n            this._bind_autocomplete();\n            this._update_initial_data();\n        }\n        this._trigger_validation();\n        this.check.detectChanges();\n    }\n\n    private _bind_autocomplete() {\n        for (const autocompleter of this.autocompleters) {\n            const widget = this.form_group.get(this.formService.getPath(autocompleter.model));\n            if (widget) {\n                widget.valueChanges.subscribe(value => {\n                    autocompleter.change(widget, value, this.value);\n                });\n            }\n        }\n    }\n\n    private _trigger_validation() {\n        if (this.form_group) {\n            Object.keys(this.form_group.controls).forEach(field => {\n                const control = this.form_group.get(field);\n                if (control) {\n                    control.markAsTouched({onlySelf: true});\n                }\n            });\n        }\n    }\n\n    private _generate_ui_control_array(configs: FieldConfig[]): DynamicFormControlModel[] {\n        const model: DynamicFormControlModel[] = [];\n        for (const config of configs) {\n            const _control = this._generate_ui_control(config);\n            if (_control) {\n                model.push(_control);\n            }\n        }\n        return model;\n    }\n\n    private _generate_ui_control(field_config: FieldConfig): DynamicFormControlModel {\n\n        const id = field_config.id || '___undefined__id__at__config';\n        const label = field_config.label || '';\n        const type = field_config.type || SimpleFieldTypes.STRING;\n\n        switch (type) {\n            case SimpleFieldTypes.STRING:\n                const sfc = field_config as StringFieldConfig;\n                const model = new DynamicInputModel(\n                    {\n                        id: id,\n                        placeholder: label,\n                        required: field_config.required,\n                        disabled: field_config.read_only,\n                        validators: {\n                            external_validator: {\n                                name: external_validator.name,\n                                args: {id: id, errors: this._external_errors}\n                            },\n                            maxLength: sfc.max_length,\n                            minLength: sfc.min_length\n                        },\n                        errorMessages: {\n                            external_error: '{{external_error}}'\n                        },\n                        list: sfc.autocomplete_list\n                    },\n                    field_config.layout\n                );\n                if (sfc.autocomplete_list ||\n                    sfc.autocomplete_url) {\n                    this.autocompleters.push(\n                        new AutoCompleter(this.httpClient, this.error_service,\n                            sfc.autocomplete_list,\n                            sfc.autocomplete_url,\n                            model));\n                }\n                return model;\n            case SimpleFieldTypes.TEXTAREA:\n                return new DynamicTextAreaModel(\n                    {\n                        id: id,\n                        placeholder: label,\n                        required: field_config.required,\n                        disabled: field_config.read_only,\n                        rows: 5,\n                        validators: {\n                            external_validator: {\n                                name: external_validator.name,\n                                args: {id: id, errors: this._external_errors}\n                            },\n                            maxLength: (field_config as TextAreaFieldConfig).max_length,\n                            minLength: (field_config as TextAreaFieldConfig).min_length\n                        },\n                        errorMessages: {\n                            external_error: '{{external_error}}'\n                        },\n                    },\n                    field_config.layout\n                );\n            case SimpleFieldTypes.DATE:\n                return new DynamicInputModel(\n                    {\n                        id: id,\n                        placeholder: label,\n                        inputType: DYNAMIC_FORM_CONTROL_INPUT_TYPE_DATE,\n                        required: field_config.required,\n                        disabled: field_config.read_only,\n                        validators: {\n                            external_validator: {\n                                name: external_validator.name,\n                                args: {id: id, errors: this._external_errors}\n                            }\n                        },\n                        errorMessages: {\n                            external_error: '{{external_error}}'\n                        },\n                    },\n                    field_config.layout\n                );\n            case SimpleFieldTypes.INTEGER:\n                const ifc = (field_config as IntegerFieldConfig);\n                return new DynamicInputModel(\n                    {\n                        id: id,\n                        placeholder: label,\n                        inputType: DYNAMIC_FORM_CONTROL_INPUT_TYPE_NUMBER,\n                        required: field_config.required,\n                        disabled: field_config.read_only,\n                        min: ifc.min_value,\n                        max: ifc.max_value,\n                        validators: {\n                            external_validator: {\n                                name: external_validator.name,\n                                args: {id: id, errors: this._external_errors}\n                            },\n                            min: ifc.min_value,\n                            max: ifc.max_value\n                        },\n                        errorMessages: {\n                            external_error: '{{external_error}}',\n                            min: `Value must be in range ${ifc.min_value} - ${ifc.max_value}`,\n                            max: `Value must be in range ${ifc.min_value} - ${ifc.max_value}`\n                        }\n                    },\n                    field_config.layout\n                );\n            case SimpleFieldTypes.FLOAT:\n                const ffc = (field_config as FloatFieldConfig);\n                return new DynamicInputModel(\n                    {\n                        id: id,\n                        placeholder: label,\n                        inputType: DYNAMIC_FORM_CONTROL_INPUT_TYPE_NUMBER,\n                        required: field_config.required,\n                        disabled: field_config.read_only,\n                        min: ffc.min_value,\n                        max: ffc.max_value,\n                        step: 0.00000001,\n                        validators: {\n                            external_validator: {\n                                name: external_validator.name,\n                                args: {id: id, errors: this._external_errors}\n                            },\n                            min: ffc.min_value,\n                            max: ffc.max_value\n                        },\n                        errorMessages: {\n                            external_error: '{{external_error}}',\n                            min: `Value must be in range ${ffc.min_value} - ${ffc.max_value}`,\n                            max: `Value must be in range ${ffc.min_value} - ${ffc.max_value}`\n                        }\n                    },\n                    field_config.layout\n                );\n            case SimpleFieldTypes.BOOLEAN:\n                return new DynamicCheckboxModel(\n                    {\n                        id: id,\n                        label: label,\n                        required: field_config.required,\n                        disabled: field_config.read_only,\n                        validators: {\n                            external_validator: {\n                                name: external_validator.name,\n                                args: {id: id, errors: this._external_errors}\n                            }\n                        },\n                        errorMessages: {\n                            external_error: '{{external_error}}'\n                        }\n                    },\n                    field_config.layout\n                );\n            case SimpleFieldTypes.RADIO:\n                return new DynamicRadioGroupModel(\n                    {\n                        id: id,\n                        label: label,\n                        options: (field_config as RadioFieldConfig).choices,\n                        required: field_config.required,\n                        disabled: field_config.read_only,\n                        validators: {\n                            external_validator: {\n                                name: external_validator.name,\n                                args: {id: id, errors: this._external_errors}\n                            }\n                        },\n                        errorMessages: {\n                            external_error: '{{external_error}}'\n                        }\n                    },\n                    field_config.layout\n                );\n            case SimpleFieldTypes.SELECT:\n                return new DynamicSelectModel(\n                    {\n                        id: id,\n                        placeholder: label,\n                        options: (field_config as SelectFieldConfig).choices,\n                        required: field_config.required,\n                        disabled: field_config.read_only,\n                        validators: {\n                            external_validator: {\n                                name: external_validator.name,\n                                args: {id: id, errors: this._external_errors}\n                            }\n                        },\n                        errorMessages: {\n                            external_error: '{{external_error}}'\n                        }\n                    },\n                    field_config.layout\n                );\n            case CompositeFieldTypes.FIELDSET:\n                return new DynamicFormGroupModel(\n                    {\n                        id: 'generated_' + this.last_id++,\n                        label: label,\n                        group: this._generate_ui_control_array((field_config as FieldSetConfig).controls)\n                    },\n                    field_config.layout\n                );\n            default:\n                throw new Error(`No ui control model for ${type}`);\n        }\n    }\n\n    private _update_initial_data() {\n        console.log('updating initial data', this._initial_data, this.form_group);\n        if (this._initial_data && this.form_group) {\n            Object.keys(this.form_group.controls).forEach(name => {\n                if (this._initial_data) {\n                    if (name in this._initial_data) {\n                        this.form_group.controls[name].setValue(this._initial_data[name]);\n                    }\n                }\n            });\n        }\n    }\n\n    public get valid() {\n        if (this.form_group) {\n            return this.form_group.valid;\n        }\n        return true;\n    }\n\n    public get value() {\n        if (this.form_group) {\n            return this.form_group.value;\n        }\n        return true;\n    }\n\n    public on_submit_on_enter() {\n        this.submit_on_enter.next(this.value);\n    }\n}\n\nexport function external_validator(conf: { id: string; errors: any }): ValidatorFn {\n    // noinspection JSUnusedLocalSymbols\n    return (_control: AbstractControl): { [key: string]: any } => {\n        if (conf.id in conf.errors) {\n            const ret = {external_error: {value: conf.errors[conf.id][0]}};\n            delete conf.errors[conf.id];\n            return ret;\n        } else {\n            return {};\n        }\n    };\n}\n\nclass AutoCompleter {\n    constructor(private http: HttpClient,\n                private errors: ErrorService,\n                private autocompletion_list: any[]|undefined,\n                private autocompletion_url: string|undefined,\n                public model: any) {\n    }\n\n    public change(_widget: any, value: string, form_value: string) {\n        let filtered_list;\n        if (this.autocompletion_url) {\n            this.http\n                .post<any[]>(this.autocompletion_url + '?query=' + encodeURIComponent(value), form_value)\n                .catch(error => {\n                    return this.errors.show_communication_error(error);\n                })\n                .subscribe(resp => {\n                    resp = resp || [];\n                    filtered_list = resp.map(x => x.label);\n                    this.model.list = filtered_list;\n                });\n        } else {\n            if (this.autocompletion_list) {\n                filtered_list = this.autocompletion_list.filter(x => x.indexOf(value) >= 0);\n                this.model.list = filtered_list;\n            } else {\n                this.model.list = [];\n            }\n        }\n    }\n}\n"]}